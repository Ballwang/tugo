// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package UserAgent

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - UserAgent
//  - AgentIp
//  - SiteId
type Agent struct {
  UserAgent string `thrift:"UserAgent,1" db:"UserAgent" json:"UserAgent"`
  AgentIp string `thrift:"AgentIp,2" db:"AgentIp" json:"AgentIp"`
  SiteId string `thrift:"SiteId,3" db:"SiteId" json:"SiteId"`
}

func NewAgent() *Agent {
  return &Agent{}
}


func (p *Agent) GetUserAgent() string {
  return p.UserAgent
}

func (p *Agent) GetAgentIp() string {
  return p.AgentIp
}

func (p *Agent) GetSiteId() string {
  return p.SiteId
}
func (p *Agent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Agent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserAgent = v
}
  return nil
}

func (p *Agent)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AgentIp = v
}
  return nil
}

func (p *Agent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SiteId = v
}
  return nil
}

func (p *Agent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Agent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Agent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserAgent", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserAgent: ", p), err) }
  if err := oprot.WriteString(string(p.UserAgent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserAgent (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserAgent: ", p), err) }
  return err
}

func (p *Agent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("AgentIp", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:AgentIp: ", p), err) }
  if err := oprot.WriteString(string(p.AgentIp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.AgentIp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:AgentIp: ", p), err) }
  return err
}

func (p *Agent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SiteId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:SiteId: ", p), err) }
  if err := oprot.WriteString(string(p.SiteId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SiteId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:SiteId: ", p), err) }
  return err
}

func (p *Agent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Agent(%+v)", *p)
}

type UserAgent interface {
  GetUserAgent() (r string, err error)
  // Parameters:
  //  - Site
  GetUserAgentById(site string) (r string, err error)
  // Parameters:
  //  - Site
  GetAgentIp(site string) (r string, err error)
  // Parameters:
  //  - SiteID
  GetAgentBySiteID(siteID string) (r *Agent, err error)
}

type UserAgentClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewUserAgentClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserAgentClient {
  return &UserAgentClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewUserAgentClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserAgentClient {
  return &UserAgentClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

func (p *UserAgentClient) GetUserAgent() (r string, err error) {
  if err = p.sendGetUserAgent(); err != nil { return }
  return p.recvGetUserAgent()
}

func (p *UserAgentClient) sendGetUserAgent()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("GetUserAgent", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := UserAgentGetUserAgentArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *UserAgentClient) recvGetUserAgent() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "GetUserAgent" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetUserAgent failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetUserAgent failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetUserAgent failed: invalid message type")
    return
  }
  result := UserAgentGetUserAgentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Site
func (p *UserAgentClient) GetUserAgentById(site string) (r string, err error) {
  if err = p.sendGetUserAgentById(site); err != nil { return }
  return p.recvGetUserAgentById()
}

func (p *UserAgentClient) sendGetUserAgentById(site string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("GetUserAgentById", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := UserAgentGetUserAgentByIdArgs{
  Site : site,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *UserAgentClient) recvGetUserAgentById() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "GetUserAgentById" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetUserAgentById failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetUserAgentById failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetUserAgentById failed: invalid message type")
    return
  }
  result := UserAgentGetUserAgentByIdResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Site
func (p *UserAgentClient) GetAgentIp(site string) (r string, err error) {
  if err = p.sendGetAgentIp(site); err != nil { return }
  return p.recvGetAgentIp()
}

func (p *UserAgentClient) sendGetAgentIp(site string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("GetAgentIp", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := UserAgentGetAgentIpArgs{
  Site : site,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *UserAgentClient) recvGetAgentIp() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "GetAgentIp" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetAgentIp failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetAgentIp failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetAgentIp failed: invalid message type")
    return
  }
  result := UserAgentGetAgentIpResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - SiteID
func (p *UserAgentClient) GetAgentBySiteID(siteID string) (r *Agent, err error) {
  if err = p.sendGetAgentBySiteID(siteID); err != nil { return }
  return p.recvGetAgentBySiteID()
}

func (p *UserAgentClient) sendGetAgentBySiteID(siteID string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("GetAgentBySiteID", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := UserAgentGetAgentBySiteIDArgs{
  SiteID : siteID,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *UserAgentClient) recvGetAgentBySiteID() (value *Agent, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "GetAgentBySiteID" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetAgentBySiteID failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetAgentBySiteID failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetAgentBySiteID failed: invalid message type")
    return
  }
  result := UserAgentGetAgentBySiteIDResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type UserAgentProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserAgent
}

func (p *UserAgentProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserAgentProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserAgentProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserAgentProcessor(handler UserAgent) *UserAgentProcessor {

  self8 := &UserAgentProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self8.processorMap["GetUserAgent"] = &userAgentProcessorGetUserAgent{handler:handler}
  self8.processorMap["GetUserAgentById"] = &userAgentProcessorGetUserAgentById{handler:handler}
  self8.processorMap["GetAgentIp"] = &userAgentProcessorGetAgentIp{handler:handler}
  self8.processorMap["GetAgentBySiteID"] = &userAgentProcessorGetAgentBySiteID{handler:handler}
return self8
}

func (p *UserAgentProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x9.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x9

}

type userAgentProcessorGetUserAgent struct {
  handler UserAgent
}

func (p *userAgentProcessorGetUserAgent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserAgentGetUserAgentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUserAgent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserAgentGetUserAgentResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetUserAgent(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserAgent: " + err2.Error())
    oprot.WriteMessageBegin("GetUserAgent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetUserAgent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userAgentProcessorGetUserAgentById struct {
  handler UserAgent
}

func (p *userAgentProcessorGetUserAgentById) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserAgentGetUserAgentByIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUserAgentById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserAgentGetUserAgentByIdResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetUserAgentById(args.Site); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserAgentById: " + err2.Error())
    oprot.WriteMessageBegin("GetUserAgentById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetUserAgentById", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userAgentProcessorGetAgentIp struct {
  handler UserAgent
}

func (p *userAgentProcessorGetAgentIp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserAgentGetAgentIpArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetAgentIp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserAgentGetAgentIpResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetAgentIp(args.Site); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAgentIp: " + err2.Error())
    oprot.WriteMessageBegin("GetAgentIp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetAgentIp", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userAgentProcessorGetAgentBySiteID struct {
  handler UserAgent
}

func (p *userAgentProcessorGetAgentBySiteID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserAgentGetAgentBySiteIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetAgentBySiteID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserAgentGetAgentBySiteIDResult{}
var retval *Agent
  var err2 error
  if retval, err2 = p.handler.GetAgentBySiteID(args.SiteID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAgentBySiteID: " + err2.Error())
    oprot.WriteMessageBegin("GetAgentBySiteID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetAgentBySiteID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type UserAgentGetUserAgentArgs struct {
}

func NewUserAgentGetUserAgentArgs() *UserAgentGetUserAgentArgs {
  return &UserAgentGetUserAgentArgs{}
}

func (p *UserAgentGetUserAgentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserAgentGetUserAgentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserAgent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserAgentGetUserAgentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserAgentGetUserAgentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserAgentGetUserAgentResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserAgentGetUserAgentResult() *UserAgentGetUserAgentResult {
  return &UserAgentGetUserAgentResult{}
}

var UserAgentGetUserAgentResult_Success_DEFAULT string
func (p *UserAgentGetUserAgentResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return UserAgentGetUserAgentResult_Success_DEFAULT
  }
return *p.Success
}
func (p *UserAgentGetUserAgentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserAgentGetUserAgentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserAgentGetUserAgentResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *UserAgentGetUserAgentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserAgent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserAgentGetUserAgentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserAgentGetUserAgentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserAgentGetUserAgentResult(%+v)", *p)
}

// Attributes:
//  - Site
type UserAgentGetUserAgentByIdArgs struct {
  Site string `thrift:"site,1" db:"site" json:"site"`
}

func NewUserAgentGetUserAgentByIdArgs() *UserAgentGetUserAgentByIdArgs {
  return &UserAgentGetUserAgentByIdArgs{}
}


func (p *UserAgentGetUserAgentByIdArgs) GetSite() string {
  return p.Site
}
func (p *UserAgentGetUserAgentByIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserAgentGetUserAgentByIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Site = v
}
  return nil
}

func (p *UserAgentGetUserAgentByIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserAgentById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserAgentGetUserAgentByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("site", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:site: ", p), err) }
  if err := oprot.WriteString(string(p.Site)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.site (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:site: ", p), err) }
  return err
}

func (p *UserAgentGetUserAgentByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserAgentGetUserAgentByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserAgentGetUserAgentByIdResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserAgentGetUserAgentByIdResult() *UserAgentGetUserAgentByIdResult {
  return &UserAgentGetUserAgentByIdResult{}
}

var UserAgentGetUserAgentByIdResult_Success_DEFAULT string
func (p *UserAgentGetUserAgentByIdResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return UserAgentGetUserAgentByIdResult_Success_DEFAULT
  }
return *p.Success
}
func (p *UserAgentGetUserAgentByIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserAgentGetUserAgentByIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserAgentGetUserAgentByIdResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *UserAgentGetUserAgentByIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserAgentById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserAgentGetUserAgentByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserAgentGetUserAgentByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserAgentGetUserAgentByIdResult(%+v)", *p)
}

// Attributes:
//  - Site
type UserAgentGetAgentIpArgs struct {
  Site string `thrift:"site,1" db:"site" json:"site"`
}

func NewUserAgentGetAgentIpArgs() *UserAgentGetAgentIpArgs {
  return &UserAgentGetAgentIpArgs{}
}


func (p *UserAgentGetAgentIpArgs) GetSite() string {
  return p.Site
}
func (p *UserAgentGetAgentIpArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserAgentGetAgentIpArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Site = v
}
  return nil
}

func (p *UserAgentGetAgentIpArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAgentIp_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserAgentGetAgentIpArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("site", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:site: ", p), err) }
  if err := oprot.WriteString(string(p.Site)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.site (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:site: ", p), err) }
  return err
}

func (p *UserAgentGetAgentIpArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserAgentGetAgentIpArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserAgentGetAgentIpResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserAgentGetAgentIpResult() *UserAgentGetAgentIpResult {
  return &UserAgentGetAgentIpResult{}
}

var UserAgentGetAgentIpResult_Success_DEFAULT string
func (p *UserAgentGetAgentIpResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return UserAgentGetAgentIpResult_Success_DEFAULT
  }
return *p.Success
}
func (p *UserAgentGetAgentIpResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserAgentGetAgentIpResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserAgentGetAgentIpResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *UserAgentGetAgentIpResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAgentIp_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserAgentGetAgentIpResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserAgentGetAgentIpResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserAgentGetAgentIpResult(%+v)", *p)
}

// Attributes:
//  - SiteID
type UserAgentGetAgentBySiteIDArgs struct {
  SiteID string `thrift:"siteID,1" db:"siteID" json:"siteID"`
}

func NewUserAgentGetAgentBySiteIDArgs() *UserAgentGetAgentBySiteIDArgs {
  return &UserAgentGetAgentBySiteIDArgs{}
}


func (p *UserAgentGetAgentBySiteIDArgs) GetSiteID() string {
  return p.SiteID
}
func (p *UserAgentGetAgentBySiteIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserAgentGetAgentBySiteIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SiteID = v
}
  return nil
}

func (p *UserAgentGetAgentBySiteIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAgentBySiteID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserAgentGetAgentBySiteIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("siteID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:siteID: ", p), err) }
  if err := oprot.WriteString(string(p.SiteID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.siteID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:siteID: ", p), err) }
  return err
}

func (p *UserAgentGetAgentBySiteIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserAgentGetAgentBySiteIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserAgentGetAgentBySiteIDResult struct {
  Success *Agent `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserAgentGetAgentBySiteIDResult() *UserAgentGetAgentBySiteIDResult {
  return &UserAgentGetAgentBySiteIDResult{}
}

var UserAgentGetAgentBySiteIDResult_Success_DEFAULT *Agent
func (p *UserAgentGetAgentBySiteIDResult) GetSuccess() *Agent {
  if !p.IsSetSuccess() {
    return UserAgentGetAgentBySiteIDResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserAgentGetAgentBySiteIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserAgentGetAgentBySiteIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserAgentGetAgentBySiteIDResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Agent{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserAgentGetAgentBySiteIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAgentBySiteID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserAgentGetAgentBySiteIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserAgentGetAgentBySiteIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserAgentGetAgentBySiteIDResult(%+v)", *p)
}


